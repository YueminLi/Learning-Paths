if(!int) formula <- paste(formula," - 1")
summary(dynlm(as.formula(formula)))
}
adf_test <- function(df, x, k = k){
list<- c("country","lx_t","lx_p")
df %>%
select(Country, Year, x) -> iv
iv <- na.omit(iv)
iv$Country <- as.character(iv$Country)
country <- data.frame(table(iv$Country))[,1]
for(i in 1:length(country)){
countryname = as.character(country[i])
temp <- iv %>%
filter(Country == countryname)
adf_iv <- ts(temp[,3])
adf(adf_iv, k = k, int = T, trend = T) -> adf_model
adf_model$coefficient[2,3] -> lx_t
adf_model$coefficient[2,4] -> lx_p
newrow <- c(countryname, lx_t, lx_p)
list <- rbind(list, newrow)
}
print(list)
}
adf_test(oecd,"IV_lendingplus",1)
adf_test(oecd,"IV_gov_expplus",1)
adf_test(oecd,"IV_trade_balanceplus",1)
adf_test(oecd,"IV_fdi_outflowplus",1)
adf_test(oecd,"C_REERplus",1)
library(tidyverse)
oecd <- read.csv("data_processing/oecd_country1960_2018.csv")
oecd$X <- NULL
oecd %>%
filter(Year >= 1960) -> oecd
colnames(oecd)
adf_test(oecd,"C_REERplus",1)
adf_test(oecd,"C_cpiplus",1)
adf_test(oecd,"C_gdpplus",1)
adf_test(oecd,"C_m2plus",1)
kable(tidy(adf_test(oecd,"C_cpiplus",1)), digits=3)
library(knitr)
kable(tidy(adf_test(oecd,"C_cpiplus",1)), digits=3)
library(knitr)
library(broom)
kable(tidy(adf_test(oecd,"C_cpiplus",1)), digits=3)
library(knitr)
library(broom)
tbl <- tidy(adf_test(oecd,"C_cpiplus",1))
kable(tbl, digits=3)
library(knitr)
library(broom)
tbl <- adf_test(oecd,"C_cpiplus",1)
kable(tbl, digits=3)
adf_test(oecd,"C_cpiplus",1)
knitr::kable(adf_test(oecd,"C_cpiplus",1), digits=3)
d <- adf_test(oecd,"C_cpiplus",1)
knitr::kable(d, digits=3)
d <- tidy(adf_test(oecd,"C_cpiplus",1))
knitr::kable(d, digits=3)
adf_test(oecd,"C_cpiplus",1)
m3_re  <- plm(DV_hh_lsplus~ IVlag1_DV_hh_lsplus +
IV_lendingplus + IV_lendingplus_lag1 + IV_lendingplus_lag2 +
IV_gov_expplus + IV_gov_expplus_lag1 + IV_gov_expplus_lag2 +
IV_trade_balanceplus + IV_trade_balanceplus_lag1 + IV_trade_balanceplus_lag2 +                                     IV_fdi_outflowplus + IV_fdi_outflowplus_lag1 + IV_fdi_outflowplus_lag2 +
C_m2plus + C_REERplus + C_cpiplus + C_gdpplus,
data = hh, model = 'random')
oecd %>%
dplyr::select(Country, Year, DV_VAplus, IVlag1_DV_VAplus,
IV_lendingplus, IV_gov_expplus, IV_trade_balanceplus, IV_fdi_outflowplus,
IV_lendingplus_lag1, IV_lendingplus_lag2, IV_gov_expplus_lag1, IV_gov_expplus_lag2,
IV_trade_balanceplus_lag1, IV_trade_balanceplus_lag2, IV_fdi_outflowplus_lag1,
IV_fdi_outflowplus_lag2, C_m2plus, C_NFLplus, C_REERplus, C_cpiplus, C_gdpplus) -> va
va[is.na(va)] <- 0
aggregate(. ~ Country + Year, data = va, sum) -> va
va[va==0] <- NA
va <- va[!is.na(va$DV_VAplus),]
library(Matrix)
library(plm)
library(car)
library(lmtest)
m1  <- plm(DV_VAplus ~  IVlag1_DV_VAplus +
IV_lendingplus + IV_lendingplus_lag1 + IV_lendingplus_lag2 +
IV_gov_expplus + IV_gov_expplus_lag1 + IV_gov_expplus_lag2 +
IV_trade_balanceplus + IV_trade_balanceplus_lag1 + IV_trade_balanceplus_lag2 +                                     IV_fdi_outflowplus + IV_fdi_outflowplus_lag1 + IV_fdi_outflowplus_lag2 +
C_m2plus + C_REERplus + C_cpiplus + C_gdpplus,
data = va, model = 'within',
effect = 'twoways', index = c('Country', 'Year'))
summary(m1)
# PCSE
summary(m1, vcovBK)
# Durbin-Watson Statistics
pdwtest(m1)
library(Matrix)
library(plm)
library(car)
library(lmtest)
m1_lsdv  <- lm(DV_VAplus ~  IVlag1_DV_VAplus +
IV_lendingplus + IV_lendingplus_lag1 + IV_lendingplus_lag2 +
IV_gov_expplus + IV_gov_expplus_lag1 + IV_gov_expplus_lag2 +
IV_trade_balanceplus + IV_trade_balanceplus_lag1 + IV_trade_balanceplus_lag2 +                                     IV_fdi_outflowplus + IV_fdi_outflowplus_lag1 + IV_fdi_outflowplus_lag2 +
C_m2plus + C_REERplus + C_cpiplus + C_gdpplus + Country, data = va)
summary(m1_lsdv)
library(car)
m1_lsdv %>% linearHypothesis(c("CountryBrazil = 0",
"CountryCanada = 0",
"CountryChile = 0",
"CountryChina (People's Republic of) = 0",
"CountryDenmark = 0",
"CountryHungary = 0",
"CountryIceland = 0",
"CountryIsrael = 0",
"CountryJapan = 0",
"CountryKorea = 0",
"CountryMexico = 0",
"CountryNew Zealand = 0",
"CountryNorway = 0",
"CountryPoland = 0",
"CountrySouth Africa = 0",
"CountrySweden = 0",
"CountrySwitzerland = 0",
"CountryTurkey = 0",
"CountryUnited Kingdom = 0",
"CountryUnited States = 0"))
oecd %>%
dplyr::select(Country, Year, DV_nfc_lsplus, IVlag1_DV_nfc_lsplus,
IV_lendingplus, IV_gov_expplus, IV_trade_balanceplus, IV_fdi_outflowplus,
IV_lendingplus_lag1,IV_lendingplus_lag2, IV_gov_expplus_lag1,IV_gov_expplus_lag2,
IV_trade_balanceplus_lag1, IV_trade_balanceplus_lag2, IV_fdi_outflowplus_lag1,
IV_fdi_outflowplus_lag2, C_m2plus, C_NFLplus, C_REERplus, C_cpiplus, C_gdpplus) -> nfc
nfc[is.na(nfc)] <- 0
aggregate(. ~ Country + Year, data = nfc, sum) -> nfc
nfc[nfc ==0] <- NA
nfc <- nfc[!is.na(nfc$DV_nfc_lsplus),]
library(Matrix)
library(plm)
m2  <- plm(DV_nfc_lsplus ~      IVlag1_DV_nfc_lsplus +
IV_lendingplus + IV_lendingplus_lag1 + IV_lendingplus_lag2 +
IV_gov_expplus + IV_gov_expplus_lag1 + IV_gov_expplus_lag2 +
IV_trade_balanceplus + IV_trade_balanceplus_lag1 + IV_trade_balanceplus_lag2 +                                     IV_fdi_outflowplus + IV_fdi_outflowplus_lag1 + IV_fdi_outflowplus_lag2 +
C_m2plus + C_REERplus + C_cpiplus + C_gdpplus,
data = nfc, model = 'within',
effect = 'twoways', index = c('Country', 'Year'))
summary(m2)
# PCSE
summary(m2, vcovBK)
# Durbin-Watson statistics
pdwtest(m2)
library(Matrix)
library(plm)
library(car)
library(lmtest)
m2_lsdv  <- lm(DV_nfc_lsplus ~      IVlag1_DV_nfc_lsplus +
IV_lendingplus + IV_lendingplus_lag1 + IV_lendingplus_lag2 +
IV_gov_expplus + IV_gov_expplus_lag1 + IV_gov_expplus_lag2 +
IV_trade_balanceplus + IV_trade_balanceplus_lag1 + IV_trade_balanceplus_lag2 +                                     IV_fdi_outflowplus + IV_fdi_outflowplus_lag1 + IV_fdi_outflowplus_lag2 +
C_m2plus + C_REERplus + C_cpiplus + C_gdpplus + Country, data = nfc)
summary(m2_lsdv)
library(car)
m2_lsdv %>% linearHypothesis(c("CountryBrazil = 0",
"CountryCanada = 0",
"CountryChile = 0",
"CountryChina (People's Republic of) = 0",
"CountryDenmark = 0",
"CountryHungary = 0",
"CountryIceland = 0",
"CountryIsrael = 0",
"CountryJapan = 0",
"CountryKorea = 0",
"CountryMexico = 0",
"CountryNew Zealand = 0",
"CountryNorway = 0",
"CountryPoland = 0",
"CountrySouth Africa = 0",
"CountrySweden = 0",
"CountrySwitzerland = 0",
"CountryTurkey = 0",
"CountryUnited Kingdom = 0",
"CountryUnited States = 0"))
oecd %>%
dplyr::select(Country, Year, DV_hh_lsplus, IVlag1_DV_hh_lsplus,
IV_lendingplus, IV_gov_expplus, IV_trade_balanceplus, IV_fdi_outflowplus,
IV_lendingplus_lag1,IV_lendingplus_lag2, IV_gov_expplus_lag1,IV_gov_expplus_lag2,
IV_trade_balanceplus_lag1, IV_trade_balanceplus_lag2, IV_fdi_outflowplus_lag1,
IV_fdi_outflowplus_lag2, C_m2plus, C_NFLplus, C_REERplus, C_cpiplus, C_gdpplus) -> hh
hh[is.na(hh)] <- 0
aggregate(. ~ Country + Year, data = hh, sum) -> hh
hh[hh ==0] <- NA
hh <- hh[!is.na(hh$DV_hh_lsplus),]
library(Matrix)
library(plm)
library(car)
library(lmtest)
m3_lsdv  <- lm(DV_hh_lsplus~ IVlag1_DV_hh_lsplus +
IV_lendingplus + IV_lendingplus_lag1 + IV_lendingplus_lag2 +
IV_gov_expplus + IV_gov_expplus_lag1 + IV_gov_expplus_lag2 +
IV_trade_balanceplus + IV_trade_balanceplus_lag1 + IV_trade_balanceplus_lag2 +                                     IV_fdi_outflowplus + IV_fdi_outflowplus_lag1 + IV_fdi_outflowplus_lag2 +
C_m2plus + C_REERplus + C_cpiplus + C_gdpplus + Country, data = hh)
summary(m3_lsdv)
library(car)
m3_lsdv %>% linearHypothesis(c("CountryBrazil = 0",
"CountryCanada = 0",
"CountryChile = 0",
"CountryChina (People's Republic of) = 0",
"CountryDenmark = 0",
"CountryHungary = 0",
"CountryIceland = 0",
"CountryIsrael = 0",
"CountryJapan = 0",
"CountryKorea = 0",
"CountryMexico = 0",
"CountryNew Zealand = 0",
"CountryNorway = 0",
"CountryPoland = 0",
"CountrySouth Africa = 0",
"CountrySweden = 0",
"CountrySwitzerland = 0",
"CountryTurkey = 0",
"CountryUnited Kingdom = 0",
"CountryUnited States = 0"))
library(tidyverse)
oecd <- read.csv("data_processing/oecd_country1960_2018.csv")
oecd$X <- NULL
oecd %>%
filter(Year >= 1960) -> oecd
colnames(oecd)
"adf" <- function(x,k = 0, int = TRUE, trend = FALSE){
# NB:  returns conventional lm summary so p-values for adf test are wrong!
require(dynlm)
dx <- diff(x)
formula <- paste("dx ~ L(x)")
if(k > 0)
formula <- paste(formula," + L(dx,1:k)")
if(trend){
s <- time(x)
t <- ts(s - s[1],start = s[1],freq = frequency(x))
formula <- paste(formula," + t")
}
if(!int) formula <- paste(formula," - 1")
summary(dynlm(as.formula(formula)))
}
adf_test <- function(df, x, k = k){
list<- c("country","lx_t","lx_p")
df %>%
select(Country, Year, x) -> iv
iv <- na.omit(iv)
iv$Country <- as.character(iv$Country)
country <- data.frame(table(iv$Country))[,1]
for(i in 1:length(country)){
countryname = as.character(country[i])
temp <- iv %>%
filter(Country == countryname)
adf_iv <- ts(temp[,3])
adf(adf_iv, k = k, int = T, trend = T) -> adf_model
adf_model$coefficient[2,3] -> lx_t
adf_model$coefficient[2,4] -> lx_p
newrow <- c(countryname, lx_t, lx_p)
list <- rbind(list, newrow)
}
print(list)
}
adf_test(oecd,"IV_lendingplus",1)
adf_test(oecd,"IV_gov_expplus",1)
adf_test(oecd,"IV_trade_balanceplus",1)
adf_test(oecd,"IV_fdi_outflowplus",1)
adf_test(oecd,"C_REERplus",1)
adf_test(oecd,"C_cpiplus",1)
adf_test(oecd,"C_gdpplus",1)
adf_test(oecd,"C_m2plus",1)
library(tseries)
po.test(as.matrix(cbind(oecd$DV_VAplus, oecd$IV_lendingplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_VAplus, oecd$IV_gov_expplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_VAplus, oecd$IV_trade_balanceplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_VAplus, oecd$IV_fdi_outflowplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_nfc_lsplus, oecd$IV_lendingplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_nfc_lsplus, oecd$IV_gov_expplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_nfc_lsplus, oecd$IV_trade_balanceplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_nfc_lsplus, oecd$IV_fdi_outflowplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_hh_lsplus, oecd$IV_lendingplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_hh_lsplus, oecd$IV_gov_expplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_hh_lsplus, oecd$IV_trade_balanceplus), demean=FALSE))
po.test(as.matrix(cbind(oecd$DV_hh_lsplus, oecd$IV_fdi_outflowplus), demean=FALSE))
library(ISLR)
install.packages('ISLR')
library(ISLR)
summary(Smarket)
dim(Smarket)
names(Smarket)
pairs(Smarket)
cor(Smarket)
cor(Smarket, [,9])
cor( Smarket, [,9] )
cor(Smarket, [,-9])
cor(Smarket[,-9])
attach(Smarket)
plot(Volume)
# Logistic Regression
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket, family=binomial)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef
glm.probs = predict(glm.fit, type="response")
contrasts(Direction)
glm.probs
glm.pred = rep("Down", 1250)
glm.pred[glm.probs > .5]="Up"
table(glm.pred, Direction)
mean(glm.pred==Direction)
# create held-out data to obtain test error rate
train=(Year<2005)
Smarket.2005=Smarket[!train,]
dim(Smarket.2005)
Direction.2005=Direction[!train]
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket, family=binomial, subset=train)
glm.probs=predict(glm.fit, Smarket.2005, type="response")
glm.pred=rep("Down", 252)
table(glm.pred, Direction.2005)
table(glm.pred, Direction.2005)
glm.pred[glm.probs > .5] = "Up"
table(glm.pred, Direction.2005)
mean(glm.pred == Direction.2005)
mean(glm.pred != Direction.2005)
install.packages('ISLR')
library(ISLR)
install.packages('MASS')
install.packages("ISLR")
install.packages('ISLR')
library(ISLR)
install.packages('MASS')
library(MASS)
library(ISLR)
library(MASS)
names(Smarket)
dim(Smarket)
summary(Smarket)
pairs(Smarket)
cor(Smarket[,-9])
attach(Smarket)
plot(Volume)
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket, family=binomial)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef
glm.probs = predict(glm.fit, type="response")
glm.probs
# show dummy variable
contrasts(Direction)
# create a vector of 1250 Down elements
glm.pred = rep("Down", 1250)
# transforms elements with over 0.5 probability to Up
glm.pred[glm.probs > .5]="Up"
# create confusion matrix
table(glm.pred, Direction)
mean(glm.pred == Direction)
train = (Year < 2005)
Smarket.2005 = Smarket[!train,]
dim(Smarket.2005)
Direction.2005 = Direction[!train]
glm.fit2 = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket, family=binomial, subset=train)
glm.probs2 = predict(glm.fit2, Smarket.2005, type="response")
glm.pred2 = rep("Down", 252)
glm.pred2[glm.probs2 > .5] = "Up"
table(glm.pred2, Direction.2005)
mean(glm.pred2 == Direction.2005)
mean(glm.pred2 != Direction.2005)
glm.fit3 = glm(Direction ~ Lag1 + Lag2, data=Smarket, family=binomial, subset=train)
glm.probs3 = predict(glm.fit3, Smarket.2005, type="response")
glm.pred3=rep("Down", 252)
glm.pred3[glm.probs3 > .5] = "Up"
table(glm.pred3, Direction.2005)
mean(glm.pred3 == Direction.2015)
glm.fit3 = glm(Direction ~ Lag1 + Lag2, data=Smarket, family=binomial, subset=train)
glm.probs3 = predict(glm.fit3, Smarket.2005, type="response")
glm.pred3=rep("Down", 252)
glm.pred3[glm.probs3 > .5] = "Up"
table(glm.pred3, Direction.2005)
mean(glm.pred3 == Direction.2005)
lda.fit = lda(Direction ~ Lag1+Lag2, data=Smarket, subset=train)
lda.fit
lda.fit = lda(Direction ~ Lag1+Lag2, data=Smarket, subset=train)
lda.fit
lda.pred = predict(lda.fit, Smarket.2005)
names(lda.pred)
lda.class = lda.pred$class
table(lda.class, Direction.2005)
mean(lda.class == Direction.2005)
sum(lda.pred$posterior[,1] >= .5)
sum(lda.pred$posterior[,1] < .5)
qda.fit = qda(Direction ~ Lag1+Lag2, data=Smarket, subset=train)
qda.fit
qda.class = predict(qda.fit, Smarket.2005)$class
table(qda.class, Direction.2005)
mean(qda.class == Direction.2005)
library(ISLR)
library(MASS)
library(class)
train.X = cbind(Lag1, Lag2)[train,]
test.X = cbind(Lag1, Lag2)[!train,]
train.Direction = Direction[train]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Direction, k=1)
table(knn.pred, Direction.2005)
mean(knn.pred == Direction.2005)
knn.pred3 = knn(train.X, test.X, train.Direction, k=3)
table3(knn.pred3, Direction.2005)
train.X = cbind(Lag1, Lag2)[train,]
test.X = cbind(Lag1, Lag2)[!train,]
train.Direction = Direction[train]
set.seed(1)
knn.pred = knn(train.X, test.X, train.Direction, k=1)
table(knn.pred, Direction.2005)
mean(knn.pred == Direction.2005)
knn.pred3 = knn(train.X, test.X, train.Direction, k=3)
table(knn.pred3, Direction.2005)
mean(knn.pred3 == Direction.2005)
library(tree)
library(ISLR)
library(MASS)
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
tree.boston = tree(medv ~ ., Boston, subset=train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston, pretty=0)
# fit a regression tree
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
tree.boston = tree(medv ~ ., Boston, subset=train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston, pretty=0)
# prune the tree?
cv.boston = cv.tree(tree.boston)
plot(cv.boston$size, cv.boston$dev, type="b")
prune.boston = prune.tree(tree.boston, best=5)
plot(prune.boston)
text(prune.boston, pretty=0)
# make predictions
yhat = predict(tree.boston, newdata=Boston[-train,])
boston.test = Boston[-train, "medv"]
plot(yhat, boston.test)
abline(0,1)
mean((yhat - boston.test)^2)
library(tree)
library(ISLR)
library(MASS)
library(randomForest)
install.packages("randomForest")
library(tree)
library(ISLR)
library(MASS)
library(randomForest)
set.seed(1)
bag.boston = randomForest(medv ~ ., data=Boston, subset=train, mtry=13, importance=TRUE)
bag.boston
set.seed(1)
bag.boston = randomForest(medv ~ ., data=Boston, subset=train, mtry=13, importance=TRUE)
bag.boston
yhat.bag = predict(bag.boston, newdata=Boston[-train,])
plot(yhat.bag, boston.test)
abline(0,1)
mean((yhat.bag-boston.test)^2)
# bagging
set.seed(1)
bag.boston = randomForest(medv ~ ., data=Boston, subset=train, mtry=13, importance=TRUE)
bag.boston
yhat.bag = predict(bag.boston, newdata=Boston[-train,])
plot(yhat.bag, boston.test)
abline(0,1)
mean((yhat.bag-boston.test)^2)
# random forest
set.seed(1)
rf.boston = randomForest(medv ~ ., data=Boston, subset=train, mtry=6, importance=TRUE)
yhat.rf = predict(rf.boston, newdata=Boston[-train,])
mean((yhat.rf-boston.test)^2)
importance(rf.boston)
# bagging
set.seed(1)
bag.boston = randomForest(medv ~ ., data=Boston, subset=train, mtry=13, importance=TRUE)
bag.boston
yhat.bag = predict(bag.boston, newdata=Boston[-train,])
plot(yhat.bag, boston.test)
abline(0,1)
mean((yhat.bag-boston.test)^2)
# random forest
set.seed(1)
rf.boston = randomForest(medv ~ ., data=Boston, subset=train, mtry=6, importance=TRUE)
yhat.rf = predict(rf.boston, newdata=Boston[-train,])
mean((yhat.rf-boston.test)^2)
importance(rf.boston)
varImpPlot(rf.boston)
library(tree)
library(ISLR)
library(MASS)
library(randomForest)
library(gbm)
install.packages("gbm")
library(tree)
library(ISLR)
library(MASS)
library(randomForest)
library(gbm)
set.seed(1)
boost.boston = gbm(medv ~ ., data=Boston[train,], distribution="gaussian", n.trees=5000, interaction.depth=4)
summary(boost.boston)
set.seed(1)
boost.boston = gbm(medv ~ ., data=Boston[train,], distribution="gaussian", n.trees=5000, interaction.depth=4)
summary(boost.boston)
par(mfrow=c(1,2))
plot(boost.boston,i="rm")
plot(boost.boston,i="lstat")
yhat.boost=predict(boost.boston, newdata=Boston[-train,], n.trees=5000)
mean((yhat.boost-boston.test)^2)
